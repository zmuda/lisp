(DEFUN LINK (R D L-R)
   (SETF (GET R L-R) D)
   (SETF (GET D 'UP) R)
)
(DEFUN LINK2 (R L P)
   (LINK R L 'LEFT) 
   (LINK R P 'RIGHT)
)
(DEFUN PARENT(D) (GET D 'UP))
(DEFUN LEFT (D) (GET D 'LEFT))
(DEFUN RIGHT (D) (GET D 'RIGHT))
(DEFUN VALUE (D) (GET D 'VALUE))

(defun PUTPROP (symb wlas wart) 
	(setf (get symb wlas) wart)
)
(defun TO-SYMBOLS (LISTA)
	(mapcar #'(lambda (x)
		(link2 (car x) (cdr(assoc 'left (cdr x))) (cdr(assoc 'right (cdr x))))
	)LISTA)
	T
)
(defun DOWN-ROUTE (D1 D2)
	(let ((res nil))
		(cond 
			((equal d1 d2) (setq res (list d2)))
			((and (left d1)(right d1)) 
				(setq res (append (DOWN-ROUTE (left d1) D2) (DOWN-ROUTE (right d1) D2))))
			((right d1) (setq res (DOWN-ROUTE (right d1) D2)))
			((left d1) (setq res (DOWN-ROUTE (left d1) D2) ))
			(T nil)
		)
		(cond (res (cons d1 res)))
	)
)
(defun COUNT-TREE(D)
	(cond ((and (numberp (value (left d))) (numberp (value (right d))) (find (value d) (list '+ '- '* '/ )))
		(eval (list (value d)(value (left d))(value (right d))))
	))
)
(defun ROUTE(D1 D2)
	(cond
		((DOWN-ROUTE D1 D2) (DOWN-ROUTE D1 D2))
		((and(parent D1)(ROUTE (parent d1) D2)) (cons d1 (ROUTE (parent d1) D2)))
		(T nil)
	)
)

(defun TO-ASSOC (ROOT ) 
	(let ((res '()))
		(push (cons root (PAIRLIS '(value left right up) (list (value root) (left root) (right root) (parent root))))  res)
		(cond ((left root) (setq res (append (TO-ASSOC (left root)) res))))
		(cond ((right root) (setq res (append (TO-ASSOC (right root)) res))))
		res
	)
)
