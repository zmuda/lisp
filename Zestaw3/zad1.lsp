(defmacro NAND (ARG1 ARG2) `(NOT (AND ,ARG1 ,ARG2)))
(defmacro IF-NOT (TEST &BODY BODY) 
	`(COND 
        ((NOT ,TEST) ,@BODY)
	)		
)
(defmacro DO-EVEN ((index start end &optional (result nil) (rule #'evenp)) &BODY BODY)
  `(do-if (,index ,start ,end ,result) ,@body)
) 
(defmacro DO-IF ((index start end &optional (result nil) (rule #'evenp)) &BODY BODY)
  `(do (
      (,index ,start (+ ,index 1))
    ) 
    ((> ,index ,end) ,result)
    (cond
		((funcall ,rule ,index) ,@body)
	)
  )
) 
(defun FILL2D (TAB2D VALUE &optional (rule #'evenp)) 
	(do-if (i 0 (-(array-total-size tab2d) 1) T rule) 
		(setf (aref tab2d (truncate(/ i 3)) (mod i 3)) value)
	)
	tab2d
)
(defun print2d (tab2d)
	(do ((row 0 (+ row 1))) 
		((not(< row (car (ARRAY-DIMENSIONS tab2d)))) T)
		(let ((tmp '()))
			(do ((col 0 (+ col 1))) 
				((not(< col (car (cdr(ARRAY-DIMENSIONS tab2d))))) T)
				(push (aref tab2d row col ) tmp)
			)			
			(print (reverse tmp))
		)
	)
)



